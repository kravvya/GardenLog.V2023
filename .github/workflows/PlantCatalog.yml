# 
# GitHub Actions workflow.
#
# Automatically deploys the "PlantCatalog" microservice on push.
#
name: Deploy PlantCatalog
run-name: ${{ github.actor }} is deploying using GitHub Actions 🚀
on:
  push:
    branches: 
      - main
    paths:
      - "PlantCatalog/**"
  pull_request:
    paths:
      - 'PlantCatalog/**'
  workflow_dispatch:

env:
  CONTAINER_APP_CONTAINER_NAME: plantcatalogapi-container
  CONTAINER_APP_NAME: plantcatalogapi-containerapp
  DOCKER_FILE_PATH: PlantCatalog/PlantCatalog.Api/Dockerfile
  PROJECT_NAME_FOR_DOCKER: plantcatalogapi

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - run: echo "🍏 This job's status is ${{ job.status }}."

  test:
    runs-on: ubuntu-latest

    env:
      mongodb-password: ${{ secrets.mongodb_password }}

    needs: setup
    steps:
    # checkout the repo
    - name: Checkout to the branch
      uses: actions/checkout@main

    - name: Install .NET Core SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: "7.0.x"

    - name: Restore NuGet packages
      run: dotnet restore

    - name: Build
      run: dotnet build -c Release --no-restore
    
    - name: Test
      run: dotnet test ~/Test/PlantCatalog.IntegrationTest/PlantCatalog.IntegrationTest.csproj -c Release --no-build
      
  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
    # checkout the repo
    - name: Checkout to the branch
      uses: actions/checkout@main
      with:
        path: PlantCatalog

    - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
    - run: echo "🖥️ The workflow is now ready to test your code on the runner."
    - name: List files in the repository
      run: |
          ls ${{ github.workspace }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to container registry
      uses: docker/login-action@v1
      with:
        registry: ${{ secrets.REGISTRY_LOGIN_SERVER }}.azurecr.io
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Build and push container image to registry
      uses: docker/build-push-action@v2
      with:
        push: true
        tags: ${{ secrets.REGISTRY_LOGIN_SERVER }}.azurecr.io/${{ env.PROJECT_NAME_FOR_DOCKER }}:${{ github.sha }}
        file: ${{ env.DOCKER_FILE_PATH }}
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # - name: Deploy to containerapp
    #   uses: azure/container-apps-deploy-action@v0
    #   with:
    #     acrName: ${{ secrets.REGISTRY_LOGIN_SERVER }}
    #     containerAppName: ${{ env.CONTAINER_APP_NAME }}
    #     resourceGroup: ${{ secrets.RESOURCE_GROUP }}
    #     acrUsername: ${{ secrets.REGISTRY_USERNAME }}
    #     acrPassword: ${{ secrets.REGISTRY_PASSWORD }}
    #     imageToDeploy: ${{ secrets.REGISTRY_LOGIN_SERVER }}.azurecr.io/${{ env.PROJECT_NAME_FOR_DOCKER }}:${{ github.sha }}
    - name: Deploy to containerapp
      uses: azure/CLI@v1
      with:
        inlineScript: >
          az config set extension.use_dynamic_install=yes_without_prompt

          az containerapp registry set --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ secrets.RESOURCE_GROUP }} --server ${{ secrets.REGISTRY_LOGIN_SERVER }}.azurecr.io --username ${{ secrets.REGISTRY_USERNAME }} --password ${{ secrets.REGISTRY_PASSWORD }}

          az containerapp update --name ${{ env.CONTAINER_APP_NAME }} --container-name ${{ env.CONTAINER_APP_CONTAINER_NAME }} --resource-group ${{ secrets.RESOURCE_GROUP }} --image ${{ secrets.REGISTRY_LOGIN_SERVER }}.azurecr.io/${{ env.PROJECT_NAME_FOR_DOCKER }}:${{ github.sha }} --set-env-vars "mongodb-password=secretref:mongodb-password"
    - name: logout
      run: >
        az logout

