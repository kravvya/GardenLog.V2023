@inject NavigationManager _navigationManager

@if (Plant != null && !string.IsNullOrWhiteSpace(Plant.PlantId))
{
    <ModalView OnCloseModal="CloseImageFormModal" @ref="ImageFormModal">
        <Body>
            <ImageForm OnClose=@CloseImageFormModal @ref=ImageForm />
        </Body>
    </ModalView>

    <div>
        <button type="button" class="btn btn-danger" @onclick="@(() => OnAddVariety())">
            <span aria-hidden="true"></span> Add Variety
        </button>
        <button type="button" class="btn btn-warning" @onclick="@(() => OnAddPlantImage())">
            <span class="oi oi-image" aria-hidden="true"></span> Add Image
        </button>
        <button type="button" class="btn btn-danger" @onclick="@(() => OnEdit())">
            <span class="oi oi-pencil" aria-hidden="true"></span> Edit
        </button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="@(() => Close())">Close</button>
    </div>

}
@code {
    [Parameter]
    public PlantModel Plant { get; set; }

    [Parameter]
    public Action Close { get; set; }

    private ModalView ImageFormModal { get; set; }
    private ImageForm ImageForm { get; set; }

     private async Task OnAddPlantImage()
    {
         ImageForm.Initialize(RelatedEntityTypes.RELATED_ENTITY_PLANT, Plant.PlantId);
        await ImageFormModal?.OpenModal(Plant.PlantName, Plant.Color);
        StateHasChanged();
    }


    private void OnAddVariety()
    {
        _navigationManager.NavigateToCreatePlantVariety(Plant.PlantId);
    }

    private void OnEdit()
    {
        _navigationManager.NavigateToEditPlant(Plant.PlantId);
    }

     private async Task CloseImageFormModal()
    {
        await ImageFormModal?.CloseModal();
        StateHasChanged();
    }


}
