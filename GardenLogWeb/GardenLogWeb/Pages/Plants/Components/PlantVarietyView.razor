@inject ILogger<PlantVarietyForm> _logger;
@inject IVerifyService _verifyService;
@inject IPlantService _plantService;
@inject NavigationManager _navigationManager;
@inject IImageService _imageService;

<article id="plantVarietyForm">
    <div class="container">
        @if (isInitialized)
        {
            <div class="row">
                <h4 class="lead">@plantVariety.Title</h4>
            </div>
            <div class="row">
                <div class="col-md-4">
                    <div>
                        <div class="plant-image">
                            <img class="d-block img-fluid " style="width: 400px; !important;" src="@_imageService.GetRawImageUrl(plantVariety.ImageFileName)" alt="@plantVariety.ImageLabel" title="@plantVariety.ImageLabel" />
                        </div>
                        <div class="plant-image-thumbnail">
                            @foreach (var image in plantVariety.Images)
                            {
                                <img class="img-fluid img-thumbnail" @key="image.ImageId" src="@_imageService.GetThumbnailImageUrl(image.FileName)" alt="@image.Label" @onclick="@(() => ReplaceImage(image))" />
                            }
                        </div>
                    </div>
                </div>

                <div class="col-md-4">
                    <div class="">
                        <h3 class="text-uppercase">Quick Facts</h3>
                        <dl class="">
                            <dt class="text-uppercase text-primary">Moisture Requirements</dt>
                            <dd class="">@GetDescription(moistureRequirementCodes, @plantVariety.MoistureRequirement)</dd>
                            @if (plantVariety.DaysToMaturity.HasValue)
                            {
                                <dt class="text-uppercase text-primary">Days To Maturity</dt>
                                <dd class="">@plantVariety.DaysToMaturity</dd>
                            }
                            @if (plantVariety.HeightInInches.HasValue)
                            {
                                <dt class="text-uppercase text-primary">Height</dt>
                                <dd class="">@plantVariety.HeightInInches in</dd>
                            }
                            <dt class="text-uppercase text-primary">Seeds Viable </dt>
                            <dd class="">@plant.SeedViableForYears Years</dd>
                            <dt class="text-uppercase text-primary">Features</dt>
                            <dd class="">
                                <img src="./images/@(plantVariety.LightRequirement).png" alt="@GetDescription(lightRequirementCodes, @plantVariety.LightRequirement)" title="@GetDescription(lightRequirementCodes, @plantVariety.LightRequirement)" class="img-fluid" />
                                @if (plantVariety.IsHeirloom)
                                {
                                    <img src="/images/Heirloom.png" alt="Heirloom" title="Heirloom" class="img-fluid">
                                }
                                @* @if (Plant.IsFallCrop)
                                    {<img src="/images/F.png" class="tooltip-img-alt plant-facts_icon" alt="Fall Crop">} *@
                                <img src="./images/@(plant.Type).png" alt="@plant.Type" title="@plant.Type" class="img-fluid" />
                                <img src="./images/@(plant.Lifecycle).png" alt="@plant.Lifecycle" title="@plant.Lifecycle" class="img-fluid">
                            </dd>
                        </dl>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-8">
                    <h3 class="text-uppercase">Description</h3>
                    <p>
                        @plantVariety.Description
                    </p>
                </div>
            </div>
        }
    </div>
</article>

@code {
    [Parameter] public Func<Task> OnClose { get; set; }

    private PlantModel plant { get; set; }
    private PlantVarietyModel plantVariety { get; set; }

    private bool isInitialized = false;

    protected IReadOnlyCollection<KeyValuePair<string, string>> lightRequirementCodes { get; set; }
    protected IReadOnlyCollection<KeyValuePair<string, string>> moistureRequirementCodes { get; set; }

    public void Initialize(PlantVarietyModel plantVariety, PlantModel plant)
    {
        this.plant = plant;
        this.plantVariety = plantVariety;

        lightRequirementCodes = _verifyService.GetCodeList < LightRequirementEnum>();
        moistureRequirementCodes = _verifyService.GetCodeList < MoistureRequirementEnum>();

        isInitialized = true;
        StateHasChanged();
    }

    private string GetDescription(IReadOnlyCollection<KeyValuePair<string, string>> options, string key)
    {
        return options.FirstOrDefault(l => l.Key.Equals(key))!.Value;
    }

    private void ReplaceImage(ImageModel newImage)
    {
        plantVariety.ImageFileName = newImage.FileName;
        plantVariety.ImageLabel = newImage.Label;
        StateHasChanged();
    }
}
