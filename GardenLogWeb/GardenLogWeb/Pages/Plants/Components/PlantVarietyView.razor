@inject ILogger<PlantVarietyForm> _logger;
@inject IVerifyService _verifyService;
@inject IPlantService _plantService;
@inject NavigationManager _navigationManager;
@inject IImageService _imageService;

<article id="plantVarietyForm">
    <div class="container">
        @if (isInitialized)
        {
            <div class="row">
                <h4 class="lead">@plantVariety.Title</h4>
            </div>
            <div class="row">
                <div class="col-md-4">
                    <div>
                        <div class="plant-image">
                            <img class="d-block img-fluid " style="width: 400px; !important;" src="@_imageService.GetRawImageUrl(plantVariety.ImageFileName)" alt="@plantVariety.ImageLabel" title="@plantVariety.ImageLabel" />
                        </div>
                        <div class="plant-image-thumbnail">
                            @foreach (var image in plantVariety.Images)
                            {
                                <img class="img-fluid img-thumbnail" @key="image.ImageId" src="@_imageService.GetThumbnailImageUrl(image.FileName)" alt="@image.Label" @onclick="@(() => ReplaceImage(image))" />
                            }
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-8">
                            <h3 class="text-uppercase">Description</h3>
                            <p>
                                @plantVariety.Description
                            </p>
                        </div>
                    </div>
                </div>

                <div class="col-md-4">
                    <div class="variety-facts-list">
                        <h3 class="text-uppercase">Quick Facts</h3>
                        <dl class="">
                            <div class="variety-facts-item row">
                                <dt class="variety-facts-term">Moisture Requirements</dt>
                                <dd class="variety-facts-definition">@(_verifyService.GetDescription(@plantVariety.MoistureRequirement))</dd>
                            </div>
                            @if (plantVariety.DaysToMaturityMin.HasValue)
                            {
                                <div class="variety-facts-item row">
                                    <dt class="variety-facts-term">Days To Maturity</dt>
                                    <dd class="variety-facts-definition">@plantVariety.DaysToMaturityMin to @plantVariety.DaysToMaturityMax</dd>
                                </div>
                            }
                            @if (plantVariety.HeightInInches.HasValue)
                            {
                                <div class="variety-facts-item row">
                                    <dt class="variety-facts-term">Height</dt>
                                    <dd class="variety-facts-definition">@plantVariety.HeightInInches in</dd>
                                </div>
                            }
                            <div class="variety-facts-item row">
                                <dt class="variety-facts-term">Seeds Viable </dt>
                                <dd class="variety-facts-definition">@plant.SeedViableForYears Years</dd>
                            </div>
                            <div class="variety-facts-item">
                                <dt class="variety-facts-term">Features</dt>
                                <dd class="variety-facts-definition">
                                    <img src="./images/@(plantVariety.LightRequirement).png" alt="@(_verifyService.GetDescription(@plantVariety.LightRequirement))" title="@(_verifyService.GetDescription(@plantVariety.LightRequirement))" class="img-fluid" />
                                    @if (plantVariety.IsHeirloom)
                                    {
                                        <img src="/images/Heirloom.png" alt="Heirloom" title="Heirloom" class="img-fluid">
                                    }
                                    @if (plant.HarvestSeason.HasFlag(HarvestSeasonEnum.Fall) || plant.HarvestSeason.HasFlag(HarvestSeasonEnum.LateFall))
                                    {
                                        <img src="/images/F.png" class="tooltip-img-alt plant-facts_icon" alt="Fall Crop">
                                    }
                                    <img src="./images/@(plant.Type).png" alt="@plant.Type" title="@plant.Type" class="img-fluid" />
                                    <img src="./images/@(plant.Lifecycle).png" alt="@plant.Lifecycle" title="@plant.Lifecycle" class="img-fluid">
                                </dd>
                            </div>
                            @if (!string.IsNullOrEmpty(tolerances))
                            {
                                <div class="variety-facts-item">
                                    <dt class="variety-facts-term">Tolerances</dt>
                                    <dd class="variety-facts-definition">
                                        @tolerances
                                    </dd>
                                </div>
                            }
                            <div class="variety-facts-item">
                                <dt class="variety-facts-term">Characteristics</dt>
                                <dd>
                                    <div class="tags" role="group" aria-label="Plant Variety Characteristics">
                                        <ul Id="plant-characteristics-tags">
                                            @foreach (var tag in plantVariety.Tags)
                                            {
                                                <li style="background-color:@plant.Color">@tag</li>
                                            }
                                        </ul>
                                    </div>
                                </dd>
                            </div>
                            <div class="variety-facts-item">
                                <dt class="variety-facts-term">Colors</dt>
                                <dd>
                                    <div class="tags" role="group" aria-label="Plant Variety Colors">
                                        <ul Id="plant-characteristics-tags">
                                            @foreach (var color in plantVariety.Colors)
                                            {
                                                <div class="color mx-1">
                                                    <label class="btn btn-outline-dark" for="@color" style="@GetStyleBasedOnColor(color)">@color</label>
                                                </div>
                                            }
                                        </ul>
                                    </div>
                                </dd>
                            </div>
                        </dl>
                    </div>
                </div>
            </div>

        }
    </div>
</article>

@code {
    [Parameter] public Func<Task> OnClose { get; set; }

    private PlantModel plant { get; set; }
    private PlantVarietyModel plantVariety { get; set; }
    protected IReadOnlyCollection<Color> varietyColors { get; set; }

    private bool isInitialized = false;
    private string tolerances = string.Empty;

    public void Initialize(PlantVarietyModel plantVariety, PlantModel plant)
    {
        this.plant = plant;
        this.plantVariety = plantVariety;

        varietyColors = _verifyService.GetPlantVarietyColors();
        tolerances = GetTolerances();
        isInitialized = true;
        StateHasChanged();
    }

    private void ReplaceImage(ImageViewModel newImage)
    {
        plantVariety.ImageFileName = newImage.FileName;
        plantVariety.ImageLabel = newImage.Label;
        StateHasChanged();
    }

    private string GetTolerances()
    {
        System.Text.StringBuilder sb = new();

        foreach (GrowToleranceEnum tolerance in Enum.GetValues(typeof(GrowToleranceEnum)))
        {
            if (plantVariety.GrowTolerance.HasFlag(tolerance) && tolerance != GrowToleranceEnum.Unspecified)
            {
                if (sb.Length > 0) { sb.Append(", "); }
                sb.Append(_verifyService.GetDescription<GrowToleranceEnum>(tolerance.ToString()));
            }
        }
        return sb.ToString();
    }

    private string GetStyleBasedOnColor(string selectedColor)
    {
        Color color = varietyColors.First(c => c.Name == selectedColor);

        if (plant.VarietyColors.Contains(color.Name))
        {
            return $"color:{color.FontColor}; background-color:{color.BackgroundColor}";
        }
        return string.Empty;
    }
}
