@inject NavigationManager _navigationManager
@inject IImageService _imageService

@if (PlantVariety != null && !string.IsNullOrWhiteSpace(PlantVariety.PlantVarietyId))
{
    <ModalView OnCloseModal="CloseImageFormModal" @ref="ImageFormModal">
        <Body>
            <ImageForm OnClose=@CloseImageFormModal @ref=ImageForm />
        </Body>
    </ModalView>
    <div class="row">
        <div class="d-grid gap-2 d-md-flex justify-content-md-start">
            <button type="button" class="btn btn-primary" title="Edit Variety" @onclick="@(() => OnEdit())"><span class="bi bi-pencil">&nbsp;</span></button>
            <button type="button" class="btn btn-warning" @onclick="@(() => OnAddPlantVarietyImage())"><span class="bi bi-card-image">&nbsp;</span></button>
            <button type="button" class="btn btn-danger" title="Close" @onclick="@(() => OnClose())"><span class="bi bi-x-circle">&nbsp;</span></button>
        </div>
    </div>
}

@code {
    [Parameter]
    public PlantModel Plant { get; set; }

    [Parameter]
    public PlantVarietyModel PlantVariety { get; set; }

    [Parameter]
    public Func<Task> OnClose { get; set; }

    private ModalView ImageFormModal { get; set; }
    private ImageForm ImageForm { get; set; }

    private async Task OnAddPlantVarietyImage()
    {
        ImageForm.Initialize(ImageEntityEnum.PlantVariety, PlantVariety.PlantVarietyId);
        await ImageFormModal?.OpenModal(PlantVariety.Name, Plant.Color);
        StateHasChanged();
    }

    private void OnEdit()
    {
        _navigationManager.NavigateToEditPlantVariety(PlantVariety.PlantId, PlantVariety.PlantVarietyId);
    }

    private async Task CloseImageFormModal()
    {
        await ImageFormModal?.CloseModal();
        StateHasChanged();
    }

    private async Task CloseImageFormModal(ImageViewModel image)
    {
        await ImageFormModal?.CloseModal();

        if(PlantVariety.ImageFileName == ImageService.NO_IMAGE)
        {
            PlantVariety.ImageFileName = image.FileName;
            PlantVariety.ImageLabel = image.Label;
        }

        PlantVariety.Images.Add(image);
        //var images = await _imageService.GetImages(ImageEntityEnum.PlantVariety, PlantVariety.PlantVarietyId, false);

        //if (images.Count > 0)
        //{
        //    PlantVariety.Images = images;
        //    var image = PlantVariety.Images.FirstOrDefault();
        //    if (image != null && string.IsNullOrWhiteSpace(PlantVariety.ImageFileName))
        //    {
        //        PlantVariety.ImageFileName = image.FileName;
        //        PlantVariety.ImageLabel = image.Label;
        //    }
        //}
        StateHasChanged();
    }
}
