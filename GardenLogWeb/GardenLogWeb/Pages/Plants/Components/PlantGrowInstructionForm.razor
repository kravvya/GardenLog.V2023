@inject ILogger<PlantGrowInstructionForm> _logger;
@inject IVerifyService _verifyService;
@inject IPlantService _plantService;
@inject NavigationManager _navigationManager;

<article id="plantGrowInstructionForm">
    <div class="container">
        @if (isInitialized)
        {
            <EditForm EditContext="@editContext" OnValidSubmit="@HandleValidSubmit" class="row g-3">

                <FluentValidationValidator />
                <CustomValidation @ref="customValidation" />

                @*<ValidationSummary />*@
                <div class="row mt-3" id="grow-type-name-container">
                    <div class="col-11">
                        <FormCard Class="border-info" HeaderClass="text-bg-info">
                            <Header>
                                <label for="StartSeedWeeksAheadOfWeatherCondition" class="card-subtitle mb-2 text-light">Characteristcs</label>
                            </Header>
                            <Body>
                                <div class="d-flex justify-content-start align-items-center flex-wrap mb-3">

                                    <div class="px-2">
                                        <label for="PlantingMethod" class="form-label">Planting Method</label>
                                        <InputSelect class="form-select" @bind-Value="growInstruction.PlantingMethod">
                                            @foreach (var item in Enum.GetValues<PlantingMethodEnum>().Where(p => p != PlantingMethodEnum.Unspecified))
                                            {
                                                <option Value="@item">@(_verifyService.GetDescription(item))</option>
                                            }
                                        </InputSelect>
                                    </div>

                                    <div class="px-2">
                                        <label for="varietytname" class="form-label">Name</label>
                                        <InputText Class="form-control flex-grow-1" @bind-Value="@growInstruction.Name" Id="Name" />
                                        <div class="invalid-feedback"><ValidationMessage For="@(() => growInstruction.Name)" /></div>
                                    </div>

                                    <div class="px-2">
                                        <label for="HarvestSeason" class="form-label">Target Harvest Season</label>
                                        <div class="row">
                                            <div class="col-12">
                                                <InputRadioGroup @bind-Value="@growInstruction.HarvestSeason" Name="HarvestSeason" id="HarvestSeason">
                                                    @foreach (var item in Enum.GetValues<HarvestSeasonEnum>().Where(p => p != HarvestSeasonEnum.Unspecified))
                                                    {
                                                        <InputRadio class="btn-check" type="radio" name="HarvestSeason" id="@item" Value="@item" />
                                                        <label class="btn btn-outline-primary" for="@item">@(_verifyService.GetDescription(item))</label>
                                                    }
                                                </InputRadioGroup>
                                            </div>
                                        </div>
                                        <div class="invalid-feedback"><ValidationMessage For="@(() => growInstruction.HarvestSeason)" /></div>
                                    </div>

                                </div>
                            </Body>
                        </FormCard>
                    </div>
                </div>


                <div class="row mt-3" id="spacing-and-fertilization-container">
                    <div class="col-10 col-lg-2">
                        <FormCard Class="border-info" HeaderClass="text-bg-info">
                            <Header>
                                <label for="SpacingInInches" class="card-subtitle mb-2 text-light">Spacing(in.)</label>
                            </Header>
                            <Body>
                                <InputNumber Class="form-control" @bind-Value="@growInstruction.SpacingInInches" id="SpacingInInches" />
                                <div class="invalid-feedback"><ValidationMessage For="@(() => growInstruction.SpacingInInches)" /></div>
                            </Body>
                        </FormCard>
                    </div>
                    <div class="col-10 col-lg-2">
                        <FormCard Class="border-info" HeaderClass="text-bg-info">
                            <Header>
                                <label for="FertilizeAtPlanting" class="card-subtitle mb-2 text-light">Fertilize At Planting</label>
                            </Header>
                            <Body>
                                <InputSelect class="form-select" @bind-Value="@growInstruction.FertilizerAtPlanting" Name="Fertilizer">
                                    @foreach (var item in Enum.GetValues<FertilizerEnum>())
                                    {
                                        <option Value="@item">@(_verifyService.GetDescription(item))</option>
                                    }
                                </InputSelect>
                                <div class="invalid-feedback"><ValidationMessage For="@(() => growInstruction.FertilizerAtPlanting)" /></div>
                            </Body>
                        </FormCard>
                    </div>
                    <div class="col-10 col-lg-6">
                        <FormCard Class="border-info" HeaderClass="text-bg-info">
                            <Header>
                                <label for="Fertilizer" class="card-subtitle mb-2 text-light">Fertilization Schedule</label>
                            </Header>
                            <Body>
                                <div class="d-flex justify-content-start align-items-center flex-wrap">
                                    <div class="px-2">
                                        <InputSelect class="form-select" @bind-Value="@growInstruction.Fertilizer" Name="Fertilizer">
                                            @foreach (var item in Enum.GetValues<FertilizerEnum>())
                                            {
                                                <option Value="@item">@(_verifyService.GetDescription(item))</option>
                                            }
                                        </InputSelect>
                                    </div>
                                    <div class="px-2"> <span>every</span> </div>
                                    <div class="px-2">
                                        <InputNumber Class="form-control" @bind-Value="@growInstruction.FertilizeFrequencyInWeeks" id="FertilizeFrequencyInWeeks" />
                                    </div>
                                    <div class="px-2"> <span>week(s)</span> </div>
                                </div>
                            </Body>
                        </FormCard>
                    </div>
                </div>

                <div class="row mt-3" id="seed-instructions-container" hidden="@HideSeedInstructions">
                    <div class="col-11">
                        <FormCard Class="border-info" HeaderClass="text-bg-info">
                            <Header>
                                <label for="StartSeedWeeksAheadOfWeatherCondition" class="card-subtitle mb-2 text-light">Grow Seeding Instructions</label>
                            </Header>
                            <Body>
                                <div class="d-flex justify-content-start align-items-center flex-wrap mb-3">

                                    <div class="p-2">
                                        <span>Start </span>
                                    </div>

                                    <div class="p-2">
                                        <InputNumber Class="form-control" @bind-Value="@growInstruction.StartSeedWeeksAheadOfWeatherCondition" id="StartSeedWeeksAheadOfWeatherCondition" />
                                    </div>

                                    <div class="p-2">
                                        <span> weeks(s)</span>
                                    </div>

                                    <div class="p-2">
                                        <InputSelect class="form-select" @bind-Value="@growInstruction.StartSeedAheadOfWeatherCondition" Name="StartSeedAheadOfWeatherCondition">
                                            @foreach (var item in Enum.GetValues<WeatherConditionEnum>().Where(p => p != WeatherConditionEnum.Unspecified))
                                            {
                                                <option Value="@item">@(_verifyService.GetDescription(item))</option>
                                            }
                                            <ValidationMessage For="@(() => growInstruction.StartSeedAheadOfWeatherCondition)" />
                                        </InputSelect>
                                    </div>

                                    <div class="p-2">
                                        <span> for </span>
                                    </div>

                                    <div class="p-2">
                                        <InputNumber Class="form-control" @bind-Value="@growInstruction.StartSeedWeeksRange" id="StartSeedWeeksRange" />
                                    </div>

                                    <div class="p-2">
                                        <span> week(s)</span>
                                    </div>

                                    <div class="p-2">
                                        <InputSelect class="form-select" @bind-Value="@growInstruction.PlantingDepthInInches" Name="PlantingDepthInInches">
                                            @foreach (var item in Enum.GetValues<PlantingDepthEnum>().Where(p => p != PlantingDepthEnum.Unspecified))
                                            {
                                                <option Value="@item">@(_verifyService.GetDescription(item))</option>
                                            }
                                        </InputSelect>
                                        <div class="invalid-feedback"><ValidationMessage For="@(() => growInstruction.PlantingDepthInInches)" /></div>
                                    </div>

                                    <div class="p-2">
                                        <span> deep</span>
                                    </div>
                                </div>

                                <div class="d-flex justify-content-start flex-sm-wrap flex-md-nowrap">
                                    <div class="p-2">
                                        <FormCard HideHeader="true">
                                            <Body>
                                                <label class="pb-2">Fertilization Schedule for Seedlings</label>
                                                <div class="d-flex justify-content-start align-items-center flex-nowrap">
                                                    <div class="px-2">
                                                        <InputSelect class="form-select" @bind-Value="@growInstruction.FertilizerForSeedlings" Name="FertilizerForSeedlings">
                                                            @foreach (var item in Enum.GetValues<FertilizerEnum>())
                                                            {
                                                                <option Value="@item">@(_verifyService.GetDescription(item))</option>
                                                            }
                                                        </InputSelect>
                                                    </div>
                                                    <div class="px-2"> <span>every</span> </div>
                                                    <div class="px-2">
                                                        <InputNumber Class="form-control" @bind-Value="@growInstruction.FertilizeFrequencyForSeedlingsInWeeks" id="FertilizeFrequencyInWeeks" />
                                                    </div>
                                                    <div class="px-2"> <span>week(s)</span> </div>
                                                </div>
                                            </Body>
                                        </FormCard>
                                    </div>

                                    <div class="p-2">
                                        <FormCard HideHeader="true">
                                            <Body>
                                                <label class="pb-2">Days to sprout</label>
                                                <div class="d-flex justify-content-start flex-nowrap">
                                                    <div class="px-2"> <span>From</span> </div>
                                                    <div class="px-2">
                                                        <InputNumber Class="form-control" @bind-Value="@growInstruction.DaysToSproutMin" id="DaysToSproutMin" />
                                                    </div>
                                                    <div class="px-2"> <span>to</span> </div>
                                                    <div class="px-2">
                                                        <InputNumber Class="form-control" @bind-Value="@growInstruction.DaysToSproutMax" id="DaysToSproutMax" />
                                                    </div>
                                                </div>
                                            </Body>
                                        </FormCard>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col">
                                        <label for="StartSeedInstructions">Start Seed Instructions</label>
                                        <InputTextArea Class="form-control" Id="StartSeedInstructions" @bind-Value="@growInstruction.StartSeedInstructions" rows="3" />
                                        <div class="invalid-feedback"><ValidationMessage For="@(() => growInstruction.StartSeedInstructions)" /></div>
                                    </div>
                                </div>

                            </Body>
                        </FormCard>
                    </div>
                </div>

                <div class="row mt-3" id="transplant-instructions-container" hidden="@HideTransplantInstructions">
                    <div class="col-11">
                        <FormCard Class="border-info" HeaderClass="text-bg-info">
                            <Header>
                                <label for="StartSeedWeeksAheadOfWeatherCondition" class="card-subtitle mb-2 text-light">Transplant Instructions</label>
                            </Header>
                            <Body>
                                <div class="d-flex justify-content-start flex-wrap mb-3">

                                    <div class="p-2">
                                        <span>Start </span>
                                    </div>

                                    <div class="p-2">
                                        <InputNumber Class="form-control" @bind-Value="@growInstruction.TransplantWeeksAheadOfWeatherCondition" id="TransplantWeeksAheadOfWeatherCondition" />
                                    </div>

                                    <div class="p-2">
                                        <span> weeks(s)</span>
                                    </div>

                                    <div class="p-2">
                                        <InputSelect class="form-select" @bind-Value="@growInstruction.TransplantAheadOfWeatherCondition" Name="TransplantAheadOfWeatherCondition">
                                            @foreach (var item in Enum.GetValues<WeatherConditionEnum>().Where(p => p != WeatherConditionEnum.Unspecified))
                                            {
                                                <option Value="@item">@(_verifyService.GetDescription(item))</option>
                                            }
                                            <ValidationMessage For="@(() => growInstruction.TransplantAheadOfWeatherCondition)" />
                                        </InputSelect>
                                    </div>

                                    <div class="p-2">
                                        <span> for </span>
                                    </div>

                                    <div class="p-2">
                                        <InputNumber Class="form-control" @bind-Value="@growInstruction.TransplantWeeksRange" id="TransplantWeeksRange" />
                                    </div>

                                    <div class="p-2">
                                        <span> week(s)</span>
                                    </div>
                                </div>
                            </Body>
                        </FormCard>
                    </div>
                </div>

                <div class="row mt-3" id="grow-instructions-container">
                    <div class="col-11">
                        <FormCard Class="border-info" HeaderClass="text-bg-info">
                            <Header>
                                <label for="GrowingInstructions" class="card-subtitle mb-2 text-light">Growing Instructions</label>
                            </Header>
                            <Body>
                                <InputTextArea Class="form-control" Id="GrowingInstructions" @bind-Value="@growInstruction.GrowingInstructions" rows="3" />
                                <div class="invalid-feedback"><ValidationMessage For="@(() => growInstruction.GrowingInstructions)" /></div>
                            </Body>
                        </FormCard>
                    </div>
                </div>

                <div class="row mt-3" id="harvest-instructions-container">
                    <div class="col-11">
                        <FormCard Class="border-info" HeaderClass="text-bg-info">
                            <Header>
                                <label for="HarvestInstructions" class="card-subtitle mb-2 text-light">Harvest Instructions</label>
                            </Header>
                            <Body>
                                <InputTextArea Class="form-control" Id="HarvestInstructions" @bind-Value="@growInstruction.HarvestInstructions" rows="3" />
                                <div class="invalid-feedback"><ValidationMessage For="@(() => growInstruction.HarvestInstructions)" /></div>
                            </Body>
                        </FormCard>
                    </div>
                </div>

                <div class="col-12 mt-3">
                    <div class="modal-footer justify-content-between">
                        @* <button type="button" class="btn btn-default text-danger disabled">Delete</button>*@
                        <span>
                            <button type="submit" class="btn btn-primary" title="Save Changes">Save <span class="bi bi-file-earmark-post">&nbsp;</span></button>
                            <button type="button" class="btn btn-danger" title="Cancel" @onclick="@(() => OnClose())">Cancel <span class="bi bi-x-circle">&nbsp;</span></button>
                        </span>
                    </div>
                </div>
            </EditForm>
        }
    </div>
</article>

@code {
    [Parameter] public Func<Task> OnClose { get; set; }

    private PlantModel plant { get; set; }
    private PlantGrowInstructionViewModel growInstruction { get; set; }

    private bool isInitialized = false;
    private bool isEdit = false;
    private CustomValidation customValidation;
    private EditContext editContext;

    public void Initialize(PlantGrowInstructionViewModel instruction, PlantModel plant)
    {
        this.plant = plant;
        if (instruction == null)
        {

            this.growInstruction = new PlantGrowInstructionViewModel();
            this.growInstruction.PlantId = this.plant.PlantId;
            //this.growInstruction.PlantingDepthInInches = "Unspecified";
            isEdit = false;
        }
        else
        {
            this.growInstruction = instruction;
            isEdit = true;

        }

        editContext = new(this.growInstruction);
        editContext.SetFieldCssClassProvider(new BootstrapValidationFieldClassProvider());
        isInitialized = true;
        StateHasChanged();
    }

    protected bool HideSeedInstructions
    {
        get { return this.growInstruction.PlantingMethod == PlantingMethodEnum.Transplanting; }
    }

    protected bool HideTransplantInstructions
    {
        get { return this.growInstruction.PlantingMethod == PlantingMethodEnum.DirectSeed; }
    }

    protected async Task HandleValidSubmit()
    {
        _logger.Log(LogLevel.Information, "Plant Grow Instructions Form passed valdiate");

        customValidation?.ClearErrors();

        ApiResponse response = (isEdit) ? await _plantService.UpdatePlantGrowInstruction(this.growInstruction) : await _plantService.CreatePlantGrowInstruction(this.growInstruction);

        if (response.ValidationProblems != null)
        {
            customValidation?.DisplayErrors(response.ValidationProblems);
        }

        if (response.IsSuccess)
        {
            await OnClose();
        }
    }
}
