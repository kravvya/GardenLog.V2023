@page "/plantvariety/{PlantId}/variety/{PlantVarietyId}"


@inject ILogger<PlantVarietyFormPage> _logger
@inject IPlantService _plantService
@inject NavigationManager _navigationManager

<Page Title="@title" Description="@description" BreadcrumbLinks="@breacrumbLinks">
    <PageContent>
        <PlantVarietyView OnClose=@ClosePage @ref="plantVarietyView" />

        <PlantVarietyViewFooter Plant=@plant PlantVariety=@plantVariety OnClose=@ClosePage />
    </PageContent>
</Page>

@code {
    [Parameter] public string PlantId { get; set; }
    [Parameter] public string PlantVarietyId { get; set; }

    private List<BreadcrumbLink> breacrumbLinks = new();

    private PlantModel plant { get; set; }
    private PlantVarietyModel plantVariety { get; set; }
    private PlantVarietyView plantVarietyView { get; set; }

    private string title { get; set; }
    private string description { get; set; }

    protected override async Task OnInitializedAsync()
    {
        plant = await GetPlant(PlantId);

        if (plant == null)
        {
            NavigateToPlants();
            return;
        }

        breacrumbLinks.Add(new BreadcrumbLink("Plants", _navigationManager.GetPlantsUrl(), false));
        breacrumbLinks.Add(new BreadcrumbLink(plant.PlantName, _navigationManager.GetViewPlantUrl(PlantId), false));

        plantVariety = await GetPlantVariety(PlantId, PlantVarietyId);
        breacrumbLinks.Add(new BreadcrumbLink($"{plantVariety.Name}", _navigationManager.GetEditPlantVarietyUrl(PlantId, PlantVarietyId), true));
        title = $"{plantVariety.Name}";
        description = "";// $"Add {plant.PlantName} Variety";
        plantVarietyView.Initialize(plantVariety, plant);

        StateHasChanged();
    }

    private async Task<PlantModel> GetPlant(string plantId)
    {
        PlantModel plant = null;

        if (!string.IsNullOrWhiteSpace(plantId))
        {
            plant = await _plantService.GetPlant(plantId, false);
        }
        return plant;
    }

    private async Task<PlantVarietyModel> GetPlantVariety(string plantId, string plantVarietyId)
    {
        PlantVarietyModel plantVariety = null;

        plantVariety = await _plantService.GetPlantVariety(plantId, plantVarietyId);

        return plantVariety;
    }

    protected async Task ClosePage()
    {
        await Task.Delay(1);
        _navigationManager.NavigateToViewPlant(PlantId);
    }

    protected void NavigateToPlants()
    {
        _navigationManager.NavigateToPlants();

    }
}
