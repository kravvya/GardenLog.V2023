@page "/viewplant/{PlantId}"

@inject IPlantService _plantService;
@inject NavigationManager _navigationManager;
@inject IImageService _imageService;
@inject IVerifyService _verifyService;

@if (Plant != null)
{
    <Page Title="@Title" Description="@Description" BreadcrumbLinks="@breadcrubLinks">
        <PageContent>
            <article id="plantView" class="row">
                <div class="col-12 col-lg-4 mb-lg-5">
                    <div class="plant-image">
                        <img class="d-block img-fluid" src="@_imageService.GetRawImageUrl(Plant.ImageFileName)" alt="@Plant.ImageLabel" />
                    </div>
                    <div class="plant-image-thumbnail">
                        @foreach (var image in Plant.Images)
                        {
                            <img class="img-fluid img-thumbnail" @key="image.ImageId" src="@_imageService.GetThumbnailImageUrl(image.FileName)" alt="@image.Label" @onclick="@(() => ReplaceImage(image))" />
                        }
                    </div>
                </div>
                <div class="col-12 col-lg-8 px-4">
                    <div class="plant-facts">
                        <h3 class="plant-facts_heading">Quick Facts</h3>
                        <dl class="plant-facts_list row mt-2 mt-lg-0">
                            <div class="plant-facts-item row mt-1">
                                <dt class="plant-facts_term  col-sm-4">Sun Requirements</dt>
                                <dd class="plant-facts_definition col">@_verifyService.GetLightRequirementDescription(Plant.LightRequirement.ToString())</dd>
                            </div>
                            <div class="plant-facts-item row mt-1">
                                <dt class="plant-facts_term  col-sm-4">Lifecycle</dt>
                                <dd class="plant-facts_definition col">@_verifyService.GetPlantLifecycleDescription(Plant.Lifecycle.ToString())</dd>
                            </div>
                            <div class="plant-facts-item row mt-1">
                                <dt class="plant-facts_term  col-sm-4">Type</dt>
                                <dd class="plant-facts_definition col">@_verifyService.GetPlantTypeDescription(Plant.Type.ToString())</dd>
                            </div>
                            <div class="plant-facts-item row mt-1">
                                <dt class="plant-facts_term  col-sm-4">Seed Viability (yrs)</dt>
                                <dd class="plant-facts_definition col">@Plant.SeedViableForYears</dd>
                            </div>
                        </dl>
                    </div>
                </div>
                <div class="row">
                    <div class="plant-details">
                        <h3 class="plant-facts_heading">Description</h3>
                        <p>
                            @Plant.Description
                        </p>

                        <h3 class="plant-facts_heading">Garden Tips</h3>
                        <p>
                            @Plant.GardenTip
                        </p>

                        <h3 class="plant-facts_heading">Varieties</h3>
                        <p>
                            <PlantVarietyList Plant=@Plant />
                        </p>

                        <h3 class="plant-facts_heading">Gorwing Instructions</h3>
                        <p>
                            <PlantGrowInstructionList Plant=@Plant />
                        </p>
                    </div>
                </div>
                <PlantViewFooter Plant=@Plant Close=@ClosePage />
            </article>
        </PageContent>
    </Page>
}

@code {
    [Parameter]
    public string PlantId { get; set; }

    private PlantModel Plant { get; set; }
    private string Title { get; set; }
    private string Description { get; set; }
    private List<BreadcrumbLink> breadcrubLinks = new();

    protected override async Task OnInitializedAsync()
    {
        breadcrubLinks.Add(new BreadcrumbLink("Plants", _navigationManager.GetPlantsUrl(), false));

        Plant = await _plantService.GetPlant(PlantId, true);

        if (Plant == null)
        {
            ClosePage();
        }

        breadcrubLinks.Add(new BreadcrumbLink(Plant.Name, _navigationManager.GetViewPlantUrl(Plant.PlantId), true));

        Title = $"{Plant.Name}";
        Description = $"{Plant.Name} Details";

    }

    private void ReplaceImage(ImageModel newImage)
    {
        Plant.ImageFileName = newImage.FileName;
        Plant.ImageLabel = newImage.Label;
        StateHasChanged();
    }

    protected void ClosePage()
    {
        _navigationManager.NavigateToPlants();

    }

}
