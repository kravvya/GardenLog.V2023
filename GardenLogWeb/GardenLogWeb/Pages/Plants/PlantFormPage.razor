@page "/addplant"
@page "/editplant/{PlantId}"

@inject ILogger<PlantFormPage> _logger;
@inject IVerifyService _verifyService;
@inject IPlantService _plantService;
@inject NavigationManager _navigationManager;

<Page Title="@title" Description="@description" BreadcrumbLinks="@breacrumbLinks">
    <PageContent>
        <article id="plantForm">
            <div class="container">
                @if (IsInitialized)
                {
                    <EditForm EditContext="@editContext" OnValidSubmit="@HandleValidSubmit" class="row g-3">
                        <FluentValidationValidator />
                        <CustomValidation @ref="customValidation" />
                        @*<ValidationSummary />*@
                        <div class="col-md-1">
                            <label for="color" class="form-label">Select color</label>
                            <ColorSelector Id="color" @bind-Color="plant.Color" Title="Select color" />
                            <div class="invalid-feedback"><ValidationMessage For="@(() => plant.Color)" /></div>
                        </div>
                        <div class="col-md-4">
                            <label for="plantname" class="form-label">Name</label>
                            <InputText Class="form-control" @bind-Value="@plant.Name" Id="plantname" />
                            <div class="invalid-feedback"><ValidationMessage For="@(() => plant.Name)" /></div>
                        </div>
                        <div class="col-md-4">
                            <label for="type">What type of Plant?</label>
                            <div class="row">
                                <div class="col-12">
                                    <InputRadioGroup @bind-Value="@plant.Type" Name="Type" id="type">
                                        @foreach (var item in Enum.GetValues<PlantTypeEnum>().Where(p => p != PlantTypeEnum.Unspecified))
                                        {
                                            <InputRadio class="btn-check" type="radio" name="Type" id="@item" Value="@item" />
                                            <label class="btn btn-outline-primary" for="@item">@(plantTypesCodes.FirstOrDefault(v => v.Key == item.ToString()).Value)</label>
                                        }
                                        <div class="invalid-feedback"><ValidationMessage For="@(() => plant.Type)" /></div>
                                    </InputRadioGroup>
                                </div>
                            </div>
                        </div>
                        <div class="col-12">
                            <label for="description">Description</label>
                            <InputTextArea Class="form-control" Id="description" @bind-Value="@plant.Description" rows="3" />
                            <div class="invalid-feedback"><ValidationMessage For="@(() => plant.Description)" /></div>
                        </div>
                        <div class="col-12">
                            <label for="tip">Garden Tips</label>
                            <InputTextArea Class="form-control" Id="tip" @bind-Value="@plant.GardenTip" rows="3" />
                            <div class="invalid-feedback"><ValidationMessage For="@(() => plant.GardenTip)" /></div>
                        </div>
                        <div class="col-md-2">
                            <FormCard>
                                <Header>
                                    <label for="Lifecyle">Lifecycle</label>
                                </Header>
                                <Body>
                                    <InputRadioGroup @bind-Value="@plant.Lifecycle" Name="Lifecyle">
                                        @foreach (var item in Enum.GetValues<PlantLifecycleEnum>().Where(p => p != PlantLifecycleEnum.Unspecified))
                                        {
                                            <div class="form-check form-check-inline">
                                                <InputRadio class="form-check-input" type="radio" name="Lifecyle" id="@item" Value="@item" />
                                                <label class="form-check-label" for="@item">@(plantLifeCyclesCodes.FirstOrDefault(v => v.Key == item.ToString()).Value)</label>
                                            </div>
                                        }
                                        <ValidationMessage For="@(() => plant.Lifecycle)" />
                                    </InputRadioGroup>
                                </Body>
                            </FormCard>
                        </div>
                        <div class="col-md-2">
                            <FormCard>
                                <Header>
                                    <label for="Tolerances">Tolerances</label>
                                </Header>
                                <Body>
                                    @foreach (var tolerance in GrowToleranceEnums)
                                    {
                                        <div class="form-check">
                                            <InputCheckbox class="form-check-input" type="checkbox" @bind-Value="tolerance.IsSelected" id="@tolerance.EnumItem.Key" />
                                            <label class="form-check-label" for="@tolerance.EnumItem.Key">
                                                @tolerance.EnumItem.Value
                                            </label>
                                        </div>
                                    }
                                </Body>
                            </FormCard>
                        </div>
                        <div class="col-md-2">
                            <FormCard>
                                <Header>
                                    <label for="LightRequirement">Light Requirements</label>
                                </Header>
                                <Body>
                                    <InputRadioGroup @bind-Value="@plant.LightRequirement" Name="LightRequirement">
                                        @foreach (var item in Enum.GetValues<LightRequirementEnum>().Where(p => p != LightRequirementEnum.Unspecified))
                                        {
                                            <div class="form-check form-check-inline">
                                                <InputRadio class="form-check-input" type="radio" name="LightRequirement" id="@item" Value="@item" />
                                                <label class="form-check-label" for="@item">@(lightRequirementCodes.FirstOrDefault(v => v.Key == item.ToString()).Value)</label>
                                            </div>
                                        }
                                        <ValidationMessage For="@(() => plant.LightRequirement)" />
                                    </InputRadioGroup>
                                </Body>
                            </FormCard>
                        </div>
                        <div class="col-md-3">
                            <FormCard>
                                <Header>
                                    <label for="MoistureRequirement">Moisture Requirements</label>
                                </Header>
                                <Body>
                                    <InputRadioGroup @bind-Value="@plant.MoistureRequirement" Name="MoistureRequirement">
                                        @foreach (var item in Enum.GetValues<MoistureRequirementEnum>().Where(p => p != MoistureRequirementEnum.Unspecified))
                                        {
                                            <div class="form-check form-check-inline">
                                                <InputRadio class="form-check-input" type="radio" name="MoistureRequirement" id="@item" Value="@item" />
                                                <label class="form-check-label" for="@item">@(moistureRequirementCodes.FirstOrDefault(v => v.Key == item.ToString()).Value)</label>
                                            </div>
                                        }
                                        <ValidationMessage For="@(() => plant.MoistureRequirement)" />
                                    </InputRadioGroup>
                                </Body>
                            </FormCard>
                        </div>
                        <div class="col-md-2">
                            <FormCard>
                                <Header>
                                    <label for="seed-viable-for-years">Seeds viable for (yrs)</label>
                                </Header>
                                <Body>
                                    <InputNumber Class="form-control" @bind-Value="@plant.SeedViableForYears" Id="seed-viable-for-years" />
                                    <div class="invalid-feedback"><ValidationMessage For="@(() => plant.Name)" /></div>
                                </Body>
                            </FormCard>
                        </div>
                        <div class="col-md-10">
                            <FormCard>
                                <Header>
                                    <label for="type">Plant Characteristics</label>
                                </Header>
                                <Body>
                                    <div class="tags" role="group" aria-label="Plant Characteristics">
                                        <ul Id="plant-characteristics-tags">
                                            @foreach (var tag in plant.Tags)
                                            {
                                                <li style="background-color:@plant.Color">@tag<a role='button' onclick=@(() => RemoveTag(tag))>×</a></li>
                                            }
                                        </ul>
                                        <input @bind:get="newTag" @bind:set="OnTagInput" @ref="inputTag" />
                                    </div>
                                </Body>
                            </FormCard>
                        </div>
                        <div class="col-12">
                            <div class="modal-footer justify-content-between">
                                <span>
                                    <button type="submit" class="btn btn-primary">Save</button>
                                    <button type="button" class="btn btn-default" @onclick="@(() => ClosePage())">Cancel</button>
                                </span>
                            </div>
                        </div>
                    </EditForm>
                }
            </div>
        </article>
    </PageContent>
</Page>

@code {

    [Parameter]
    public string PlantId { get; set; }

    private PlantModel plant { get; set; }
    private string title { get; set; }
    private string description { get; set; }

    private ElementReference inputTag;
    private string newTag = string.Empty;

    private bool IsInitialized = false;
    private bool isEdit = false;
    private CustomValidation customValidation;
    private EditContext editContext;


    protected IReadOnlyCollection<KeyValuePair<string, string>> plantLifeCyclesCodes { get; set; }
    protected IReadOnlyCollection<KeyValuePair<string, string>> lightRequirementCodes { get; set; }
    protected IReadOnlyCollection<KeyValuePair<string, string>> moistureRequirementCodes { get; set; }
    protected IReadOnlyCollection<KeyValuePair<string, string>> growToleranceCodes { get; set; }
    protected IReadOnlyCollection<KeyValuePair<string, string>> plantTypesCodes { get; set; }
    public List<CheckableEnum> GrowToleranceEnums { get; set; } = new();

    private List<BreadcrumbLink> breacrumbLinks = new();

    protected override async Task OnInitializedAsync()
    {
        breacrumbLinks.Add(new BreadcrumbLink("Plants", _navigationManager.GetPlantsUrl(), false));
        plantLifeCyclesCodes = _verifyService.GetCodeList<PlantLifecycleEnum>(true);
        lightRequirementCodes = _verifyService.GetCodeList<LightRequirementEnum>(true);
        moistureRequirementCodes = _verifyService.GetCodeList<MoistureRequirementEnum>(true);
        growToleranceCodes = _verifyService.GetCodeList<GrowToleranceEnum>(true);
        plantTypesCodes = _verifyService.GetCodeList<PlantTypeEnum>(true);

        foreach (var code in growToleranceCodes)
        {
            GrowToleranceEnums.Add(new CheckableEnum(code));
        }

        if (string.IsNullOrEmpty(PlantId))
        {
            breacrumbLinks.Add(new BreadcrumbLink("Add Plant", _navigationManager.GetCreatePlantUrl(), true));
            plant = new PlantModel();
            plant.Color = _plantService.GetRandomPlantColor();
            isEdit = false;
            title = $"Add Plant";
            description = $"";
        }
        else
        {
            plant = await _plantService.GetPlant(PlantId, false);

            if (plant == null)
            {
                ClosePage();
                return;
            }
            else
            {
                breacrumbLinks.Add(new BreadcrumbLink(plant.Name, _navigationManager.GetEditPlantUrl(PlantId), true));

                GrowToleranceEnums.ForEach(item => item.IsSelected = plant.GrowTolerance.HasFlag(Enum.Parse<GrowToleranceEnum>(item.EnumItem.Key)));

                isEdit = true;
                title = $"Edit {plant.Name}";
                description = $"";
            }

        }

        editContext = new(plant);
        editContext.SetFieldCssClassProvider(new BootstrapValidationFieldClassProvider());
        IsInitialized = true;
        StateHasChanged();
    }

    private void OnTagInput(string value)
    {
        plant.Tags.Add(value.Trim());
        newTag = string.Empty;
        inputTag.FocusAsync();
    }
    private void RemoveTag(string tag)
    {
        plant.Tags.RemoveAll(t => t == tag);
        StateHasChanged();
    }

    protected async Task HandleValidSubmit()
    {
        _logger.Log(LogLevel.Information, "Plant Form passed validations");
        customValidation?.ClearErrors();

        foreach (var item in GrowToleranceEnums)
        {
            if (item.IsSelected)
            {
                plant.GrowTolerance |= Enum.Parse<GrowToleranceEnum>(item.EnumItem.Key);
            }
            else
            {
                plant.GrowTolerance &= ~Enum.Parse<GrowToleranceEnum>(item.EnumItem.Key);
            }
        }

        ApiResponse response = (isEdit) ? await _plantService.UpdatePlant(plant) : await _plantService.CreatePlant(plant);

        if (response.ValidationProblems != null)
        {
            customValidation?.DisplayErrors(response.ValidationProblems);
        }

        if (response.IsSuccess)
        {
            ClosePage();
        }
    }

    protected void ClosePage()
    {
        _navigationManager.NavigateToPlants();

    }
}
