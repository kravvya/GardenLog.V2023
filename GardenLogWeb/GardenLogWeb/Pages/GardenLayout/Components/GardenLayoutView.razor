@inject IGardenService _gardenService;

<div class="row g-3 align-items-center p-2">
    <div class="col-auto">
        <input type="number" @bind=_settings.ViewBoxY class="form-control" /> @_settings.SvgHeight
    </div>
    <div class="col-auto">
        <input type="number" @bind=_settings.ViewBoxX class="form-control" />@_settings.SvgWidth
    </div>
    <div class="col-auto">
        <input type="number" @bind=_settings.Zoom class="form-control" />
    </div>
</div>

<div class="garden-layout-container">
    <div class="garden-plan">
        <div class="d-flex flex-nowrap mb-3">
            <div class="vertical-ruler-div">
                <GardenVerticalRuler Garden="@Garden" Settings="@_settings" />
            </div>

            <div>
                <div class="horizontal-ruler-div">
                    <GardenHorizontalRuler Garden="@Garden" Settings="@_settings" />
                </div>
                <div class="garden_layout">
                    <GardenLayout Garden="@Garden" Settings="@_settings" />
                </div>
            </div>
        </div>

        <div class="d-flex  justify-content-between flex-nowrap " style="width: @(_settings.SvgWidth)px">
            <div class="p-2">
                <div class="btn-group" role="group" aria-label="Navigation Buttons">
                    <div class="px-1"><button type="button" class="btn btn-info" @onclick="@(() => _settings.MoveUp())"><span class="bi bi-arrow-up">&nbsp;</span></button></div>
                    <div class="px-1"><button type="button" class="btn btn-info" @onclick="@(() => _settings.MoveDown())"><span class="bi bi-arrow-down">&nbsp;</span></button></div>
                </div>
            </div>
            <div class="p-2  ">
                <label for="zoom" class="form-label">Zoom</label>
                <input type="range" class="form-range" min="0" max="1000" step="50" id="zoom" @bind=_settings.Zoom>
            </div>
            <div class="p-2">
                <div class="btn-group" role="group" aria-label="Navigation Buttons">
                    <div class="px-1"><button type="button" class="btn btn-info" @onclick="@(() => _settings.MoveLeft())"><span class="bi bi-arrow-left">&nbsp;</span></button></div>
                    <div class="px-1"><button type="button" class="btn btn-info" @onclick="@(() => _settings.MoveRight())"><span class="bi bi-arrow-right">&nbsp;</span></button></div>
                </div>
            </div>
        </div>

    </div>
</div>



@code {
    [Parameter]
    public GardenModel Garden { get; set; }
    private GardenPlanSettings _settings = null;

    protected override async Task OnParametersSetAsync()
    {
        if (Garden != null)
        {
            _settings = new GardenPlanSettings(Garden.Length, Garden.Width);

            StateHasChanged();
        }
    }
}