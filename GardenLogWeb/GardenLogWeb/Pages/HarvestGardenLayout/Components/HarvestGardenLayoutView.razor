@inject IGardenService _gardenService;
@inject IHarvestCycleService _harvestCycleService;
@inject NavigationManager _navigationManager;
@inject IVerifyService _verifyService;
@inject ILogger<HarvestGardenLayoutView> _logger;

<ModalView OnCloseModal="CloseGardenBedPlantFormModal" @ref="_gardenBedFormModal">
    <Body>
        <GardenBedPlantHarvestCycleForm OnClose=@CloseGardenBedPlantForm @ref=_gardenBedPlantForm />
    </Body>
</ModalView>


@if (_garden != null)
{
    <div class="row ">
        <div class="col-md-2">
            <div class="card border-info">
                <div class="card-header text-bg-info">
                    <h5>
                        @_garden.Name
                    </h5>
                </div>
                <div class="card-body">
                    <div class="garden-facts-item mt-1">
                        <dl class="garden-facts_list row mt-2 mt-lg-0">
                            <dt class="garden-facts_term">Total Grow Area</dt>
                            <dd class="garden-facts_definition ms-auto">@(GetTotalGrowArea()) sq. ft</dd>

                            <dt class="garden-facts_term">Free Grow Area</dt>
                            <dd class="garden-facts_definition  ms-auto">1000 sq. ft</dd>

                            <dt class="garden-facts_term">Number of Beds </dt>
                            <dd class="garden-facts_definition  ms-auto">@_gardenBeds?.Count()</dd>

                            <dt class="garden-facts_term">Number of Free Beds</dt>
                            <dd class="garden-facts_definition  ms-auto">@GetNumberOfFreeBeds()</dd>
                        </dl>
                    </div>
                    <div class="card-footer">
                        <div class="d-flex gap-2 gy-2 d-md-flex justify-content-end">
                            <button type="button" class="btn btn-info" title="Show all plants">
                                <span class="bi bi-eye">&nbsp;</span>
                            </button>

                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-7">
                <div class="card border-info">
                    <div class="card-header text-bg-info">
                        <h5>
                            Plants
                        </h5>
                    </div>
                    <div class="card-body">

                        <div id="collapse1" class="table-responsive">
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th scope="col"></th>
                                        <th scope="col">Name</th>
                                        <th scope="col">Variety</th>
                                        <th scope="col"># Left</th>
                                        <th scope="col"># Planned</th>
                                        <th scope="col">Plant Date</th>
                                        <th scope="col">Plants per sq. ft.</th>
                                        <th scope="col">Space required</th>

                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (_harvestPlants != null)
                                    {
                                        @foreach (var plant in _harvestPlants)
                                        {
                                            <tr>
                                                <td>
                                                    <img src="@plant.ImageFileName" title="@plant.ImageLabel" class="plant-image" role="button" @onclick="@(() => SelectPlantInGardenBed(plant))" />
                                                </td>
                                                <td>@plant.PlantName</td>
                                                <td>@plant.PlantVarietyName</td>
                                                <td>@plant.NumberOfPlantsLeftToAddToGardenBedLayout</td>
                                                <td>@plant.NumberOfPlantsInGardenBedLayout</td>
                                                <td>@plant.GetPlantingDate()</td>
                                                <td>@plant.GetPlantsPerFoot()</td>
                                                <td>
                                                    @((int?)(plant.NumberOfPlantsLeftToAddToGardenBedLayout / plant.GetPlantsPerFoot())) sq. ft.
                                                </td>
                                                <td>
                                                    <div class="d-flex gap-2 flex-nowrap">
                                                        <button type="button" class="btn btn-secondary" title="Add to Garden Bed" @onclick="@(() => CreateGardenBedHarvestPlant(plant))">
                                                            <span class="bi bi-plus">&nbsp;</span>
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>

                </div>
            </div>

        </div>
    </div>
}

@if (_settings != null)
{
    <div class="harvest-garden-layout-container">
        <div class="harvest-garden-plan mt-3">

            <div>
                <div class="garden_layout">
                    <HarvestGardenLayout Garden="@_garden" GardenBeds=@_gardenBeds GardenBedHarvestPlants="@(_harvestPlants?.SelectMany(g => g.GardenBedLayout).ToList())" Settings="@_settings" NotifyViewOfSelectedGardenBedPlant="@NotifyViewOfSelectedGardenBedPlant" PlantDeleted="@GardenBedHarvestPlantDeleted" GardenBedPlantChanged="@GardenBedPlantChanged" @ref=_harvestGardenLayout />
                </div>
            </div>


            <div class="d-flex  justify-content-between flex-nowrap " style="width: @(_settings.SvgWidth)px">
                <div class="p-2">
                    <div class="btn-group" role="group" aria-label="Navigation Buttons">
                        <div class="px-1"><button type="button" class="btn btn-info" @onclick="@(() => _settings.MoveUp())"><span class="bi bi-arrow-up">&nbsp;</span></button></div>
                        <div class="px-1"><button type="button" class="btn btn-info" @onclick="@(() => _settings.MoveDown())"><span class="bi bi-arrow-down">&nbsp;</span></button></div>
                    </div>
                </div>
                <div class="p-2  ">
                    <label for="zoom" class="form-label">Zoom</label>
                    <input type="range" class="form-range" min="0" max="5000" step="100" id="zoom" @bind=_settings.Zoom>
                </div>
                <div class="p-2">
                    <div class="btn-group" role="group" aria-label="Navigation Buttons">
                        <div class="px-1"><button type="button" class="btn btn-info" @onclick="@(() => _settings.MoveLeft())"><span class="bi bi-arrow-left">&nbsp;</span></button></div>
                        <div class="px-1"><button type="button" class="btn btn-info" @onclick="@(() => _settings.MoveRight())"><span class="bi bi-arrow-right">&nbsp;</span></button></div>
                    </div>
                </div>
            </div>

        </div>
    </div>
}


@code {
    [Parameter]
    public HarvestCycleModel? HarvestCycle { get; set; }

    private GardenPlanSettings? _settings;
    private GardenModel? _garden;
    private List<GardenBedModel>? _gardenBeds;
    private IList<PlantHarvestCycleModel>? _harvestPlants;

    private GardenBedPlantHarvestCycleModel? _selectedGardenBedPlant;

    //attrbibute to acccess layout compoenent
    private HarvestGardenLayout? _harvestGardenLayout;

    //2 atrbiutes for managing modal form to create/edit GardenBedPlant
    private ModalView? _gardenBedFormModal;
    private GardenBedPlantHarvestCycleForm? _gardenBedPlantForm;
    private bool _skipSave = true;

    protected override async Task OnParametersSetAsync()
    {
        if (HarvestCycle != null)
        {
            var gardenTask = _gardenService.GetGarden(HarvestCycle.GardenId, true);
            var gardenBedsTask = _gardenService.GetGardenBeds(HarvestCycle.GardenId, true);
            var plantsTask = _harvestCycleService.GetPlantHarvests(HarvestCycle.HarvestCycleId, false);

            await Task.WhenAll(gardenTask, gardenBedsTask, plantsTask);

            _garden = gardenTask.Result;
            _gardenBeds = gardenBedsTask.Result;
            _harvestPlants = plantsTask.Result;

            _settings = new GardenPlanSettings(_garden.Length, _garden.Width);
            StateHasChanged();
        }
    }

    private async Task NotifyViewOfSelectedGardenBedPlant(GardenBedPlantHarvestCycleModel selectedGardenBedPlant)
    {

        if (_selectedGardenBedPlant != null)
        {
            _logger.LogInformation($"GardenBedHarvestPlantSelected - saving {_selectedGardenBedPlant.PlantName}");
            if (! _skipSave) await _harvestCycleService.UpdateGardenBedPlantHarvestCycle(_selectedGardenBedPlant);
        }
        _selectedGardenBedPlant = selectedGardenBedPlant;
        _skipSave = true;
        StateHasChanged();
    }

    //Called from the garden bed plant grid - when plant is selected
    private async Task SelectPlantInGardenBed(PlantHarvestCycleModel plant)
    {
        var gardenLayoutPlant = plant.GardenBedLayout.FirstOrDefault();
        if (gardenLayoutPlant != null && _harvestGardenLayout!= null) await _harvestGardenLayout.PlantSelectedFromTheGridOfOtherPlants(gardenLayoutPlant);
    }

    //method invokde by Draggable plant selector to notify View that Garden Bed Plant has changed its dimensions
    private void GardenBedPlantChanged(GardenBedPlantHarvestCycleModel selectedPlant)
    {
        _skipSave = false;
        StateHasChanged();
    }

    private async Task GardenBedHarvestPlantDeleted(GardenBedPlantHarvestCycleModel deletedGardenBedPlant)
    {
        _selectedGardenBedPlant = null;
        _skipSave = true;

        if (_harvestPlants == null) return;

        var harvestPlant = _harvestPlants.FirstOrDefault(p => p.PlantHarvestCycleId == deletedGardenBedPlant.PlantHarvestCycleId);

        if (harvestPlant == null) return;

        harvestPlant?.GardenBedLayout?.Remove(deletedGardenBedPlant);

        await _harvestCycleService.DeleteGardenBedPlantHarvestCycle(deletedGardenBedPlant.HarvestCycleId, deletedGardenBedPlant.PlantHarvestCycleId, deletedGardenBedPlant.GardenBedPlantHarvestCycleId);

        StateHasChanged();
    }




    private void CreateGardenBedHarvestPlant(PlantHarvestCycleModel plant)
    {
        //_gardenBedForm.Initialize(null, Garden, _settings.StartX, _settings.StartY);
        //await _gardenBedFormModal.OpenModal(plant.GetPlantName(), GlobalConstants.ModalFormColor);

        //var gardenBed = _gardenBeds.First();

        //GardenBedPlantHarvestCycleModel planntedPlant = new()
        //    {
        //        GardenBedPlantHarvestCycleId = Guid.NewGuid().ToString(),
        //        //PlantHarvestCycleId = plant.PlantHarvestCycleId,
        //        GardenBedId = gardenBed.GardenBedId,
        //        //GardenId = _garden.GardenId,
        //        ImageFileName = plant.ImageFileName,
        //        ImageLabel = plant.ImageLabel,
        //        NumberOfPlants = Convert.ToInt32(plant.GetPlantsPerFoot() >= 1 ? plant.GetPlantsPerFoot() : 1),
        //        PlantId = plant.PlantId,
        //        PlantName = plant.PlantName,
        //        PlantsPerFoot = plant.GetPlantsPerFoot(),
        //        Length = 0,
        //        Width = 0
        //    };
        //planntedPlant.SetLengthAndWidth(gardenBed.Length, gardenBed.Width);

        //plant.GardenBedLayout.Add(planntedPlant);

        //_harvestGardenLayout.PlantSelectedFromTheGridOfOtherPlants(planntedPlant);

        //Console.WriteLine($"Added plant to garden {planntedPlant.GardenBedId}");
        //StateHasChanged();
    }




    private string GetTotalGrowArea()
    {
        if (_gardenBeds != null)
        {
            return (_gardenBeds.Sum(g => g.Length * g.Width) / 12).ToString("N0", System.Globalization.CultureInfo.InvariantCulture);
        }
        return "0";
    }

    private int GetNumberOfFreeBeds()
    {
        if (_harvestPlants == null || _gardenBeds == null) return 0;

        var numberOfBedsInUse = _harvestPlants.SelectMany(h => h.GardenBedLayout)
        .Select(p => p.GardenBedId)
        .Distinct()
        .Count();
        return _gardenBeds.Count - numberOfBedsInUse;
    }

    private async Task CloseGardenBedPlantFormModal()
    {
        await _gardenBedFormModal!.CloseModal();
        StateHasChanged();
    }

    private async Task CloseGardenBedPlantForm(GardenBedModel gardenBed)
    {
        await _gardenBedFormModal!.CloseModal();

        if (HarvestCycle != null) _harvestPlants = await _harvestCycleService.GetPlantHarvests(HarvestCycle.HarvestCycleId, false);
        StateHasChanged();
    }


    private void ViewGardenImage()
    {
        if (_garden != null)
            _navigationManager.NavigateToGardenImages(_garden.GardenId);
    }
}
