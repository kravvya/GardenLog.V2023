@inject IGardenLogToastService _toastService;
@inject ILogger<GardenForm> _logger;
@inject IGardenService _gardenService;

<article id="harvestCycleForm">
    <div class="container">
        @if (_isInitialized && _garden != null)
        {
            <EditForm EditContext="@_editContext" OnValidSubmit="@HandleValidSubmitAsync" OnInvalidSubmit="@HandleInValidSubmit">

                <FluentValidationValidator />
                <CustomValidation @ref="customValidation" />

                <div class="row">
                    <div class="col-md-8">
                        <label for="name">Name</label>
                        <InputText class="form-control" id="name" @bind-Value="@_garden.Name" />
                        <ValidationMessage For="@(() => _garden.Name)" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-5">
                        <label for="City">City</label>
                        <InputText class="form-control" id="City" @bind-Value="@_garden.City" />
                        <ValidationMessage For="@(() => _garden.City)" />
                    </div>
                    <div class="col-md-3">
                        <label for="long">State</label>
                        <InputText class="form-control" @bind-Value="@_garden.StateCode" />
                        <ValidationMessage For="@(() => _garden.StateCode)" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-5">
                        <label for="lat">Latitude</label>
                        <InputNumber T="decimal" class="form-control" id="lat" @bind-Value="@_garden.Latitude" />
                        <ValidationMessage For="@(() => _garden.Latitude)" />
                    </div>
                    <div class="col-md-5">
                        <label for="long">Longitude</label>
                        <InputNumber T="decimal" class="form-control" id="long" @bind-Value="@_garden.Longitude" />
                        <ValidationMessage For="@(() => _garden.Longitude)" />
                    </div>
                </div>


                <div class="col-md-10">
                    <label for="description">Description</label>
                    <InputTextArea Class="form-control" Id="description" @bind-Value="@_garden.Notes" rows="5" />
                    <ValidationMessage For="@(() => _garden.Notes)" />
                </div>

                <div class="col-12">
                    <div class="modal-footer">
                        @if (_isEdit)
                        {
                            <button type="submit" class="btn btn-primary" title="Save Changes">
                                <span class="bi bi-file-earmark-post">&nbsp;</span> Save
                            </button>
                        }
                        else
                        {
                            <button type="submit" class="btn btn-primary" title="Create Garden">
                                <span class="bi bi-file-earmark-post">&nbsp;</span> Add
                            </button>
                        }
                        <button type="button" class="btn btn-danger" @onclick="@(() => OnClose(_garden))">Cancel <span class="bi bi-x-circle">&nbsp;</span></button>
                    </div>
                </div>
            </EditForm>
        }
    </div>
</article>

@code {
    [Parameter] public Func<GardenModel, Task> OnClose { get; set; }

    private bool _isInitialized = false;
    private GardenModel _garden = null;
    private EditContext _editContext;
    private bool _isEdit = false;
    private CustomValidation customValidation;

    public async void Initialize(GardenModel? garden)
    {
        _garden = garden;

        if (_garden == null)
        {
            _garden = new GardenModel();
        }
        _isEdit = !string.IsNullOrEmpty(_garden.GardenId);

        _editContext = new(_garden);
        _editContext.SetFieldCssClassProvider(new BootstrapValidationFieldClassProvider());
        _isInitialized = true;
        StateHasChanged();
    }

    protected async Task HandleValidSubmitAsync()
    {
        _logger.Log(LogLevel.Information, "Garden Form passed validations");
        customValidation?.ClearErrors();

        ApiResponse response = (_isEdit) ? await _gardenService.UpdateGarden(_garden) : await _gardenService.CreateGarden(_garden);

        if (response.ValidationProblems != null)
        {
            customValidation?.DisplayErrors(response.ValidationProblems);
        }

        if (response.IsSuccess)
        {
            await OnClose(_garden);
        }
    }

    protected void HandleInValidSubmit()
    {
        _toastService.ShowToast("Garden can not be save. Please correct validation errors.", GardenLogToastLevel.Error);
    }
}
